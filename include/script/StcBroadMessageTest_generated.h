// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_STCBROADMESSAGETEST_BROADFLAT_H_
#define FLATBUFFERS_GENERATED_STCBROADMESSAGETEST_BROADFLAT_H_

#include "flatbuffers/flatbuffers.h"


namespace BroadFlat {

struct StcBroadMessageHeader;
struct StcBroadMessageTest;

struct StcBroadMessageHeader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t id() const { return GetField<uint32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* id */) &&
           verifier.EndTable();
  }
};

struct StcBroadMessageHeaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(4, id, 0); }
  StcBroadMessageHeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StcBroadMessageHeaderBuilder &operator=(const StcBroadMessageHeaderBuilder &);
  flatbuffers::Offset<StcBroadMessageHeader> Finish() {
    auto o = flatbuffers::Offset<StcBroadMessageHeader>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<StcBroadMessageHeader> CreateStcBroadMessageHeader(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t id = 0) {
  StcBroadMessageHeaderBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct StcBroadMessageTest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t id() const { return GetField<uint32_t>(4, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(6); }
  uint32_t age() const { return GetField<uint32_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<uint32_t>(verifier, 8 /* age */) &&
           verifier.EndTable();
  }
};

struct StcBroadMessageTestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) { fbb_.AddElement<uint32_t>(4, id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(6, name); }
  void add_age(uint32_t age) { fbb_.AddElement<uint32_t>(8, age, 0); }
  StcBroadMessageTestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StcBroadMessageTestBuilder &operator=(const StcBroadMessageTestBuilder &);
  flatbuffers::Offset<StcBroadMessageTest> Finish() {
    auto o = flatbuffers::Offset<StcBroadMessageTest>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<StcBroadMessageTest> CreateStcBroadMessageTest(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   uint32_t age = 0) {
  StcBroadMessageTestBuilder builder_(_fbb);
  builder_.add_age(age);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

}  // namespace BroadFlat

#endif  // FLATBUFFERS_GENERATED_STCBROADMESSAGETEST_BROADFLAT_H_
